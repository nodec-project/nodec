name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  macos:
    timeout-minutes: 15

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-12
    # runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Test nodec
      working-directory: ${{github.workspace}}/nodec

      run: |
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNODEC_BUILD_TESTS=ON

        cd build

        # Build your program with the given configuration
        cmake --build . --config ${{env.BUILD_TYPE}}

        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure


    - name: Test nodec_animation
      working-directory: ${{github.workspace}}/modules/nodec_animations

      run: |
        cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNODEC_ANIMATIONS_BUILD_TESTS=ON
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}}
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Test nodec_scene
      working-directory: ${{github.workspace}}/modules/nodec_scene

      run: |
        cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNODEC_SCENE_BUILD_TESTS=ON
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}}
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Test nodec_scene_serialization
      working-directory: ${{github.workspace}}/modules/nodec_scene_serialization

      run: |
        cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNODEC_SCENE_SERIALIZATION_BUILD_TESTS=ON
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}}
        ctest -C ${{env.BUILD_TYPE}} --output-on-failure
